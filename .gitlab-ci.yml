stages:
  - build 
  - test
  - release
  - deploy

variables:
  IMAGE_NAME: 'mini-projet-gitlab'
  IMAGE_TAG: 'v1'
  DOCKER_USRNAME: 'hamzablr'
  HOST_PORT: 80
  CONTAINER_PORT: 80
  SERVER_USERNAME: 'ubuntu'

# ---------------------
# üõ†Ô∏è BUILD IMAGE
# ---------------------
Build:
  stage: build
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  script:
    - docker build --no-cache -t $IMAGE_NAME:$IMAGE_TAG .
    - docker save -o mini-projet-gitlab.tar $IMAGE_NAME:$IMAGE_TAG
  artifacts:
    paths:
      - mini-projet-gitlab.tar

# ---------------------
# ‚úÖ TEST IMAGE
# ---------------------
Test:
  stage: test
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  before_script:
    - apk add --no-cache curl
  script:
    - docker load -i mini-projet-gitlab.tar
    - docker run -d -p $HOST_PORT:$CONTAINER_PORT --name test-$IMAGE_NAME $IMAGE_NAME:$IMAGE_TAG
    - sleep 5
    - curl -I "http://localhost:$HOST_PORT" | grep -i "200 OK"
    - docker stop test-$IMAGE_NAME

# ---------------------
# üöÄ RELEASE IMAGE TO DOCKER HUB
# ---------------------
Release_Image:
  stage: release
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USRNAME" --password-stdin
    - docker load -i mini-projet-gitlab.tar
    - docker tag $IMAGE_NAME:$IMAGE_TAG $DOCKER_USRNAME/$IMAGE_NAME:$IMAGE_TAG
    - docker push $DOCKER_USRNAME/$IMAGE_NAME:$IMAGE_TAG

# ---------------------
# üì¶ DEPLOY TEMPLATE
# ---------------------
.deploy_app: &deploy_app
  stage: deploy
  before_script:
    - apk add --no-cache openssh
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 -d > /tmp/id_rsa
    - chmod 600 /tmp/id_rsa
    - ssh-add /tmp/id_rsa
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
  script:
    - ssh -i /tmp/id_rsa $SERVER_USERNAME@$SERVER_IP "docker pull $DOCKER_USRNAME/$IMAGE_NAME:$IMAGE_TAG"
    - ssh -i /tmp/id_rsa $SERVER_USERNAME@$SERVER_IP "docker stop $IMAGE_NAME || true && docker rm $IMAGE_NAME || true"
    - ssh -i /tmp/id_rsa $SERVER_USERNAME@$SERVER_IP "docker run -d -p $HOST_PORT:$CONTAINER_PORT --name $IMAGE_NAME $DOCKER_USRNAME/$IMAGE_NAME:$IMAGE_TAG"

# ---------------------
# üåê DEPLOY ENVIRONMENTS
# ---------------------
Deploy_review:
  <<: *deploy_app
  variables:
    SERVER_IP: '1.2.3.4'  # üîÅ Remplace par l'IP de ton serveur de review
  image: alpine
  environment:
    name: Review

Deploy_staging:
  <<: *deploy_app
  variables:
    SERVER_IP: '1.2.3.4'  # üîÅ Remplace par l'IP de staging
  image: alpine
  environment:
    name: Staging

Deploy_production:
  <<: *deploy_app
  variables:
    SERVER_IP: '1.2.3.4'  # üîÅ Remplace par l'IP de production
  image: alpine
  environment:
    name: Production
